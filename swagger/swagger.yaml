openapi: 3.0.0

info:
  title: Data Dagger API
  description: ""
  version: 0.1.9

tags:
  - "Authentication"
  - "Authentication | Users"
  - "Authentication | Keys"
  - "Authentication | Organizations"
  - "Authentication | Invites"
  - "Authentication | Admin"
  - "Translations"

paths:
  # AUTHENTICATION SERVICE

  # /
  /api/auth/login:
    post:
      tags:
        - "Authentication"
      summary: "User Login"
      description: "Stateless user login with JWT and refresh token cookies"
      parameters:
        - in: body
          name: "User"
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: "Ok: JWT cookie and RefreshToken cookie are attached to response."
        '400':
          description: "Bad Request: email and/or password is missing."
        '401':
          description: "Unauthorized: User could not be authenticated."

  /api/auth/register:
    post:
      tags:
        - "Authentication"
      summary: "User Registration"
      description: "Creates new user and logs in the new user"
      parameters:
        - in: body
          name: "User"
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
              first_name:
                type: string
              last_name:
                type: string
      responses:
        '201':
          description: "Created: User is created and 'jwt' and 'refresh_token' cookies are attached to response."
        '400':
          description: "Bad Request: Password is too short, email and/or password is missing or email is not a valid email address"
        '409':
          description: "Conflict: Email address already in use."

  /api/auth/logout:
    post:
      tags:
        - "Authentication"
      summary: "User Logout"
      description: "Expires 'jwt' and 'refresh_token' cookies. If a valid refresh token was provided it will be deleted from the database."
      parameters:
        - in: cookie
          name: 'refresh_token'
          description: "JWT token"
      responses:
        '204':
          description: "No Content: User is logged out."

  /api/auth/renew:
    post:
      tags:
        - "Authentication"
      summary: "Renew JWT token"
      description: "Returns a new JWT cookie if a valid refresh token is provided"
      parameters:
        - in: cookie
          name: 'refresh_token'
          description: "JWT token"
      responses:
        '200':
          description: "Ok: Refresh token was verified and a new 'jwt' cookie is provided"
        '401':
          description: "Unauthorized: User could not be authenticated."

  # /users
  /api/auth/users:
    get:
      tags:
        - "Authentication | Users"
      summary: "Get a list of users"
      description: "Get all users, or specify which users you want returned with query params"
      parameters:
        - in: query
          name: ids (optional)
          description: "A list of user ids, comma separated"
          example: "/api/auth/users?ids=asdf1234,fdsa4321"
      responses:
        '200':
          description: "Ok: one or more users found"
        '404':
          description: "Not Found: No users found"
        # /keys

  /api/auth/users/self:
    get:
      tags:
        - "Authentication | Users"
      summary: "Get user data for a logged-in user"
      description: "Returns user data with roles and organizations for a logged-in user"
      responses:
        '200':
          description: "Ok"
        '401':
          description: "Unauthorized: User could not be authenticated."

  # /keys
  /api/auth/keys/publickey:
    get:
      tags:
        - "Authentication | Keys"
      summary: "Get public RSA key"
      description: "The key is used to verify the JWT token provided with the 'jwt' cookie returned on login"
      responses:
        '200':
          description: "Ok: The public key is return"
          content:
            text/plain:
              schema:
                example: "-----BEGIN PUBLIC KEY-----
                          1234567890qwertyuiopasdfgh
                          jklzxcvbnm1234567890
                          -----END PUBLIC KEY-----"
        '404':
          description: "Not Found: The key was not found on the server."

  # /orgs
  /api/auth/orgs:
    get:
      tags:
        - "Authentication | Organizations"
      summary: "Get all organizations for a logged-in user"
      description: "Return a list of all organizations for a logged-in user"
      responses:
        '200':
          description: "A list of invites"
        '401':
          description: "Unauthorized: User could not be authenticated."

    post:
      tags:
        - "Authentication | Organizations"
      summary: "Creates a new organization"
      description: "A new organization is created. Requires a valid JWT cookie on request. The user that makes the request will automatically get owner role of the organization"
      parameters:
        - in: body
          name: "Organization Info"
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              contact_email:
                type: string
              contact_phone:
                type: string
      responses:
        '201':
          description: "Created: The new organization was successfully created."
        '400':
          description: "Bad Request: A name for the organization was not provided."
        '401':
          description: "Unauthorized: User could not be authenticated."
        '409':
          description: "Conflict: The organization name is unavailable."

  /api/auth/{org_id}:
    get:
      tags:
        - "Authentication | Organizations"
      summary: "Get organization data for a certain organization"
      description: "Returns an organization's data if the logged-in user is authorized as a member of the requested organization"
      responses:
        '200':
          description: "Organization data"
        '401':
          description: "Unauthorized: User could not be authenticated or authorized as a member or the requested organization."


  # /invite
  /api/auth/invite:
    get:
      tags:
        - "Authentication | Invites"
      summary: "Get logged-in user's invites"
      description: "Return a list of all invites for a logged-in user"
      responses:
        '200':
          description: "Ok"
        '401':
          description: "Unauthorized: User could not be authenticated."

    post:
      tags:
        - "Authentication | Invites"
      summary: "Invite users to an organization"
      description: "Endpoint for organization owners and moderators to invite new members"
      parameters:
        - in: body
          name: "request body"
          schema:
            type: object
            required:
              - org_id
              - emails
            properties:
              org_id:
                type: string
              emails:
                type: array
      responses:
        '200':
          description: "Ok"
          content:
            application/json:
              schema:
                type: object
                example:
                  invited: "An array of the successfully invited emails"
                  invalid: "An array of invalid email addresses"
                  alreadyJoined: "An array of emails by users that have already joined the organization"
                  tooEarly: "An array of emails that have active invitations sent less than 24 hours ago"
        '400':
          description: "Bad Request: The request includes illegal properties (not 'org_id' or 'emails'), 'org_id' or 'email' was not provided, properties are not of the correct type, or there are duplicate emails in the request"
        '401':
          description: "Unauthorized: User could not be authenticated."
        '403':
          description: "Forbidden: The user that made the request is not OWNER or MODERATOR in the organization."

    delete:
      tags:
        - "Authentication | Invites"
      summary: "Delete multiple invitations"
      description: "Endpoint for organization owners and moderators to delete pending invitations"
      parameters:
        - in: body
          name: "request body"
          schema:
            type: object
            required:
              - org_id
              - emails
            properties:
              org_id:
                type: string
              emails:
                type: object
      responses:
        '204':
          description: "No Content: The request was processed successfully"
        '400':
          description: "Bad Request: the request body did not include the correct fields or types."
        '401':
          description: "Unauthorized: User could not be authenticated."
        '403':
          description: "Forbidden: The user that made the request is not OWNER or MODERATOR in the organization."

  /api/auth/invite/{org_id}:
    get:
      tags:
        - "Authentication | Invites"
      summary: "Get invitations"
      description: "Returns all pending inviations for a given organization. (NOTE: only an org OWNER or MODERATOR can access this information)"
      parameters:
        - in: path
          name: org_id
          description: "the id for an organization"
      responses:
        '200':
          description: "A list of invites"
          content:
            application/json:
              schema:
                type: array
                example:
                  { data: [ { organization_id: "1234", email: "bob@johnson.com" }, { organization_id: "1234", email: "john@bobson.com" } ] }
        '401':
          description: "Unauthorized: User could not be authenticated."
        '403':
          description: "Forbidden: The user that made the request is not OWNER or MODERATOR in the organization."

  /api/auth/invite/answer:
    post:
      tags:
        - "Authentication | Invites"
      summary: "Answer invitations"
      description: "Deletes an invitation an adds the user to the organization if it was accepted"
      parameters:
        - in: body
          name: "request body"
          schema:
            type: object
            required:
              - org_id
              - answer
            properties:
              org_id:
                type: string
              answer:
                type: boolean
      responses:
        '204':
          description: "No Content: The request was processed successfully."
        '400':
          description: "Bad Request: the request body did not include the correct fields or types."
        '401':
          description: "Unauthorized: User could not be authenticated."
        '404':
          description: "Not Found: No user found with that id."

  # /admin
  /api/auth/admin/user-enabled:
    put:
      tags:
        - "Authentication | Admin"
      summary: "Enable/disable a user"
      description: "Enabled or disables a user"
      parameters:
        - in: body
          name: "request body"
          schema:
            type: object
            required:
              - user_id
              - enabled
            properties:
              user_id:
                type: string
              enabled:
                type: boolean
      responses:
        '204':
          description: "No Content: The request was processed successfully."
        '400':
          description: "Bad Request: the request body did not include the correct fields or types."
        '401':
          description: "Unauthorized: User could not be authenticated or authorized."
        '403':
          description: "Forbidden: An admin cannot enable/disable themselves or other admins."
        '404':
          description: "Not Found: No invitation found for the user with that organization."

  /api/auth/admin/org-enabled:
    put:
      tags:
        - "Authentication | Admin"
      summary: "Enable/disable an organization"
      description: "Enabled or disables an organization"
      parameters:
        - in: body
          name: "request body"
          schema:
            type: object
            required:
              - org_id
              - enabled
            properties:
              org_id:
                type: string
              enabled:
                type: boolean
      responses:
        '204':
          description: "No Content: The request was processed successfully."
        '400':
          description: "Bad Request: the request body did not include the correct fields or types."
        '401':
          description: "Unauthorized: User could not be authenticated or authorized."
        '403':
          description: "Forbidden: Attempted to use a role that doesn't exist or to remove the default USER role."
        '404':
          description: "Not Found: No organization found with that id."

  /api/auth/admin/user-roles:
    put:
      tags:
        - "Authentication | Admin"
      summary: "Grant/remove roles"
      description: "Endpoint for Super Admins to grant or remove role of ADMIN or SUPER ADMIN to a user"
      parameters:
        - in: body
          name: "request body"
          description: "A user_id and a role to grant. If 'remove' is 'true' the role will be removed from the user, else it will be granted"
          schema:
            type: object
            required:
              - user_id
              - role
              - remove
            properties:
              user_id:
                type: string
              role:
                type: string
              remove:
                type: boolean
      responses:
        '204':
          description: "No Content: The request was processed successfully."
        '400':
          description: "Bad Request: the request body did not include the correct fields or types."
        '401':
          description: "Unauthorized: User could not be authenticated or authorized."
        '403':
          description: "Forbidden: Invalid role name or it was attempted to remove the USER role"
        '404':
          description: "Not Found: No user found with that id."

  # TRANSLATION SERVICE
  /api/tl:
    get:
      tags:
        - "Translations"
      summary: "Get all translations in the database"
      description: "Returns all translations in the database if the user is super admin"
      responses:
        '200':
          description: "Ok"
        '401':
          description: "Unauthorized: User could not be authenticated or authorized."
    put:
      tags:
        - "Translations"
      summary: "Create or update a translation"
      description: "Endpoint for a super admin to update (or create if doesn't exist) a translation"
      parameters:
        - in: body
          name: "request body"
          schema:
            type: object
            required:
              - page
              - key
              - translations
            properties:
              page:
                type: string
              key:
                type: string
              translations:
                type: object
      responses:
        '200':
          description: "Ok: translation created/updated"
        '400':
          description: "Bad Request: request body had faulty data"
        '401':
          description: "Unauthorized: User could not be authenticated or authorized."
    delete:
      tags:
        - "Translations"
      summary: "Delete translations"
      description: "Deletes multiple translations from the database if the logged-in user is super admin"
      parameters:
        - in: body
          name: "request body"
          schema:
            required:
              - ids
            properties:
              ids:
                type: object
      responses:
        '204':
          description: "No Content: successfully deleted translations"
        '400':
          description: "Bad Request: Request body did not container required properties or they were an invalid type"
        '401':
          description: "Unauthorized: User could not be authenticated or authorized."

  /api/tl/{page}:
    get:
      tags:
        - "Translations"
      summary: "Get translations for a certain page"
      description: "Returns all translations belonging to a specific page"
      parameters:
        - in: query
          name: "locale"
          description: "A locale (returns 'en' by default if not specified)"
          schema:
            properties:
              locale:
                type: string
      responses:
        '200':
          description: "Ok: A list (possibly empty) for the requested page"

